# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1W2GF55GA-iIQjxRWncQl8rD09JxeZUH4
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import streamlit as st
from babel.numbers import format_currency

# Membuat dataframe berdasarkan data yang telah diimpor sebelumnya
customers_df = pd.read_csv("https://raw.githubusercontent.com/gloryindahs/E-commerce-Gathering-Data/main/customers_dataset.csv")
orders_df = pd.read_csv("https://raw.githubusercontent.com/gloryindahs/E-commerce-Gathering-Data/main/orders_dataset.csv")
order_payments_df = pd.read_csv("https://raw.githubusercontent.com/gloryindahs/E-commerce-Gathering-Data/main/order_payments_dataset.csv")
order_items_df = pd.read_csv("https://raw.githubusercontent.com/gloryindahs/E-commerce-Gathering-Data/main/order_items_dataset.csv")

# Menyesuaikan data datetime
datetime_columns = ["order_purchase_timestamp", "order_approved_at", "order_delivered_carrier_date", "order_delivered_customer_date", "order_estimated_delivery_date"]
for column in datetime_columns:
    orders_df[column] = pd.to_datetime(orders_df[column])

# Menentukan rentang tanggal
min_date = orders_df["order_purchase_timestamp"].min()
max_date = orders_df["order_purchase_timestamp"].max()

# Sidebar untuk rentang waktu
with st.sidebar:
    st.image("https://github.com/gloryindahs/E-commerce-Gathering-Data/blob/main/hoodie.jpg")
    start_date, end_date = st.date_input("Rentang Waktu", min_value=min_date, max_value=max_date, value=[min_date, max_date])

# Filter data berdasarkan rentang tanggal
filtered_orders_df = orders_df[(orders_df["order_purchase_timestamp"] >= start_date) & (orders_df["order_purchase_timestamp"] <= end_date)]

# Fungsi untuk membuat dataframe berdasarkan state customer
def create_bystate_df(df):
    bystate_df = df.groupby("customer_state").customer_id.nunique().reset_index()
    bystate_df.rename(columns={"customer_id": "customer_count"}, inplace=True)
    return bystate_df

# Fungsi untuk membuat dataframe RFM
def create_rfm_df(df):
    rfm_df = df.groupby("customer_id", as_index=False).agg({
        "order_purchase_timestamp": "max",
        "order_id": "nunique",
        "price": "sum"
    })
    rfm_df.columns = ["customer_id", "max_order_timestamp", "frequency", "monetary"]
    rfm_df["max_order_timestamp"] = pd.to_datetime(rfm_df["max_order_timestamp"]).dt.date
    recent_date = rfm_df["max_order_timestamp"].max()
    rfm_df["recency"] = (recent_date - rfm_df["max_order_timestamp"]).dt.days
    rfm_df.drop("max_order_timestamp", axis=1, inplace=True)
    return rfm_df

# Fungsi untuk membuat dataframe berdasarkan tipe pembayaran
def create_payment_type_counts_df(df):
    payment_type_counts = df["payment_type"].value_counts()
    return payment_type_counts

# Menggunakan fungsi-fungsi yang telah didefinisikan
bystate_df = create_bystate_df(customers_df)
rfm_df = create_rfm_df(filtered_orders_df)
payment_type_counts_df = create_payment_type_counts_df(order_payments_df)

# Menampilkan header dan subheader
st.header("Collection Dashboard :sparkles:")
st.subheader("Customer Demographics")

# Plot jumlah pelanggan berdasarkan state
plt.figure(figsize=(10, 5))
colors_ = ["#72BCD4", "#D3D3D3", "#D3D3D3", "#D3D3D3", "#D3D3D3", "#D3D3D3", "#D3D3D3", "#D3D3D3"]
sns.barplot(x="customer_count", y="customer_state", data=bystate_df, palette=colors_)
plt.title("Number of Customers by State", loc="center", fontsize=15)
plt.ylabel("State")
plt.xlabel("Number of Customers")
plt.tick_params(axis='y', labelsize=12)
st.pyplot()

# Menampilkan subheader dan metrik
st.subheader("Best Customer Based on RFM Parameters")
col1, col2, col3 = st.columns(3)
with col1:
    avg_recency = round(rfm_df.recency.mean(), 1)
    st.metric("Average Recency (days)", value=avg_recency)

with col2:
    avg_frequency = round(rfm_df.frequency.mean(), 2)
    st.metric("Average Frequency", value=avg_frequency)

with col3:
    avg_monetary = format_currency(rfm_df.monetary.mean(), "USD", locale='en_US')
    st.metric("Average Monetary", value=avg_monetary)

# Menampilkan distribusi Recency, Frequency, dan Monetary
plt.figure(figsize=(10, 5))
sns.histplot(rfm_df['recency'], bins=20, color='skyblue')
plt.title('Distribution of Recency', fontsize=15)
plt.xlabel('Recency (Days)', fontsize=12)
plt.ylabel('Frequency', fontsize=12)
plt.show()
st.pyplot()

plt.figure(figsize=(10, 5))
sns.histplot(rfm_df['frequency'], bins=20, color='salmon')
plt.title('Distribution of Frequency', fontsize=15)
plt.xlabel('Frequency', fontsize=12)
plt.ylabel('Count', fontsize=12)
plt.show()
st.pyplot()

plt.figure(figsize=(10, 5))
sns.histplot(rfm_df['monetary'], bins=20, color='green')
plt.title('Distribution of Monetary', fontsize=15)
plt.xlabel('Monetary', fontsize=12)
plt.ylabel('Count', fontsize=12)
plt.show()
st.pyplot()

# Menampilkan informasi pembayaran
st.subheader("Customer Payment")
plt.figure(figsize=(8, 8))
colors_ = ["#72BCD4", "#D3D3D3", "#D3D3D3", "#D3D3D3", "#D3D3D3"]
plt.pie(payment_type_counts_df, labels=payment_type_counts_df.index, autopct='%1.1f%%', colors=colors_)
plt.title("Distribution of Payments by Payment Type", fontsize=15)
plt.show()
st.pyplot()